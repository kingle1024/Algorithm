item32. 제네릭과 가변인수를 함께 쓸 때는 신중하라.

가변인수 메서드와 제네릭은 자바5때 함께 추가되었으니 서로 잘 어우러지리라 기대하겠지만, 슬프게도 그렇지 않다.
가변인수 메서드를 호출하면 가변인수를 담기 위한 배열이 자동으로 하나 만들어진다. 그런데 내부로 감춰야 했을 이 배열을 그만 클라이언트에 노출하는 문제가 생겼다.
그 결과 varargs 매개변수에 제네릭이나 매개변수화 타입이 포함되면 알기 어려운 컴파일 경고가 발생한다.



Object[] objects = stringLists;
objects[0] = intList; // 힙 오염 발생 
String s = stringLists[0].get(0); // ClassCastException
이 메서드에서는 형변환하는 곳이 보이지 않는데도 인수를 건네 호출하면 ClassCastException을 던진다.
마지막 줄에 컴파일러가 생성한(보이지 않는) 형변환이 숨어 있기 때문이다.
이처럼 타입 안전성이 깨지니 제네릭 varargs 배열 매개변수에 값을 저장하는 것은 안전하지 않다.

이 예를 보고 재미난 질문을 떠올려보자. 
제네릭 배열을 프로그래머가 직접 생성하는 건 허용하지 않으면서 제네릭 varargs 매개변수를 받는 메서드를 선언할 수 있게 한 이유는 무엇일까?
그 답은 제네릭이나 매개변수화 타입의 varargs 매개변수를 받는 메서드가 실무에서 매우 유용하기 때문이다. 
그래서 언어 설계자는 이 모순을 수용하기로 했다.
사실 자바 라이브러리도 이런 메서드를 여럿 제공하는데,
Arrays.asList(T... a), Collections.addAll(Collection<? super T> c, T... elements), EnumSet.of(E first, E... rest)가 대표적이다.
다행인 점은 앞서 보여준 위험한 메서드와는 달리 이들은 타입 안전하다.

static <T> T[] pickTwo(T a, T b, T c) {
  switch(TrheadLocalReandom.current().nextInt(3)) {
    case 0: return toArray(a, b);
    case 1: return toArray(a, c);
    case 2: return toArray(b, c);
  } 
  throw new AssertionError();
}

public static void main(String[] args) {
  String[] attributes = picTwo("a", "b", "c");
}
아무런 문제가 없는 메서드이니 별다른 경고 없이 컴파일된다. 하지만 실행하려 들면 ClassCastException을 던진다.
형변환하는 곳이 보이지 않는데도 말이다. 무엇을 놓친 것일까? 바로 pickTwo의 반환값을 attributes에 저장하기 위해 String[]로 형변환하는 코드를 컴파일러가 자동 생성한다는 점을 놓쳤다.
Object[]는 String[]의 하위 타입이 아니므로 이 형변환은 실패한다. 이 실패가 다소 황당하게 느껴질 수 있을 것이다.
힙 오염을 발생시킨 진짜 원인인 toArray로부터 두 단계나 떨어져 있고, varargs 매개변수 배열은 실제 매개변수가 저장된 후 변경된 적도 없으니 말이다.
이 예는 제네릭 varargs 매개변수 배열에 다른 메서드가 접근하도록 허용하면 안전하지 않다는 점을 다시 한번 상기시킨다. 

아래와 같이 변경하면 사용 가능하다.
static <T> List<T> pickTwo(T a, T b, T c) {
  switch(TrheadLocalReandom.current().nextInt(3)) {
    case 0: return List.of(a, b);
    case 1: return List.of(a, c);
    case 2: return List.of(b, c);
  } 
  throw new AssertionError();
}
그리고 main 메서드는 다음처럼 변한다.
public static void main(String[] args) {
  List<String> attributes = pickTwo("a", "b", "c");
}

[핵심 정리]
가변인수와 제네릭은 궁합이 좋지 않다.
가변인수 기능은 배열을 노출하여 추상화가 완벽하지 못하고, 배열과 제네릭의 타입 규칙이 서로 다르기 때문이다.
제네릭 varargs 매개변수는 타입 안전하지는 않지만, 허용된다. 메서드에 제네릭 (혹은 배개변수화된) varargs 매개변수를 사용하고자 한다면,
먼저 그 메서드가 타입 안전한지 확인한 다음 @SafeVarargs 애너테이션을 달아 사용하는 데 불편함이 없게끔 하자. 

