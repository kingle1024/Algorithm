item6. 불필요한 객체 생성을 피하라

생성자 대신 정적 팩터리 메서드를 제공하는 불변 클래스에서는 정적 팩터리 메서드를 사용해 불필요한 객체 생성을 피할 수 있다.
예컨대 Boolean(String) 생성자 대신 Boolean.valueOf(String) 팩터리 메서드를 사용하는 것이 좋다(그래서 이 생성자는 자바 9에서 사용 자제 API로 지정되었다)

String.matches는 정규표현식으로 문자열 형태를 확인하는 가장 쉬운 방법이지만, 성능이 중요한 상황에서 반복해 사용하기엔 적합하지 않다.
이 메서드가 내부에서 만드는 정규표현식용 Pattern 인스턴스는, 한 번 쓰고 버려져서 곧바로 가비지 컬렉션 대상이 된다. 
Patter은 입력받은 정규표현식에 해당하는 유한 상태 머신(finite state machine)을 만들기 때문에 인스턴스 생성 비용이 높다.
성능을 개선하려면 필요한 정규표현식을 표현하는 (불변인) Pattern 인스턴스를 클래스 초기화(정적 초기화) 과정에서 직접 생성해 캐싱해두고, 
나중에 isRomanNumeral 메서드가 호출될 때마다 이 인스턴스를 재사용한다.

```코드 6-2 값비싼 객체를 재사용해 성능을 개선한다.
public class RomanNumerals {
  private static final Pattern ROMAN = Pattern.compile( "^(?=.)M* .... ");

  static boolean isRomanNumeral(String s) {
    return ROMAN.matcher(s).matchers();
  }
}

단순히 객체 생성을 피하고자 여러분만의 객체 풀(pool)을 만들지는 말자.
물론 객체 풀을 만드는 게 더 나은 예가 있긴 하다. 데이터베이스 연결 같은 경우 생성 비용이 워낙 비싸니 재사용하는 편이 낫다.
하지만 일반적으로는 자체 객체 풀은 코드를 헷갈리게 만들고 메모리 사용량을 늘리고 성능을 떨어뜨린다.
요즘 JVM의 가비지 컬렉터는 상당히 잘 최적화되어서 가벼운 객체용을 다룰 때는 직접 만든 객체 풀보다 훨씬 빠르다.

방어적 복사가 필요한 상황에서 개겣를 재사용했을 떄의 피해가, 필요 없는 객체를 반복 생성했을 떄의 피해보다 훨씬 크다는 사실을 기억하자.
방어적 복사에 실패하면 언제 터져 나올지 모르는 버그와 보안 구멍으로 이어지지만, 불필요한 객체 생성은 그저 코드 형태와 성능에만 영향을 준다.
