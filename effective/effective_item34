item34. int 상수 대신 열거 타입을 사용하라

정수 열거 패턴(int enum pattern)
public static final int APPLE_FUZI = 0;
public static final int APPLE_PIPPIN = 1;

단점
- 타입 안전을 보장할 방법이 없으며 표현력도 좋지 않다.
- 오렌지를 건네야 할 메서드에 사과를 보내고 동등 연산자(==)로 비교하더라도 컴파일러는 아무 경고 메시지를 출력하지 않는다.
- 정수 열거 패턴을 사용한 프로그램은 깨지기 쉽다. 평범한 상수를 나열한 것뿐이라 컴파일하면 그 값이 클라이언트 파일에 그대로 새겨진다. 
따라서 상수의 값이 바뀌면 클라이언트도 반드시 다시 컴파일해야 한다. 다시 컴파일하지 않은 클라이언트는 실행이 되더라도 엉뚱하게 동작할 것이다.
- 정수 상수는 문자열로 출력하기가 다소 까다롭다. 그 값을 출력하거나 디버거로 살펴보면 (의미가 아닌) 단지 숫자로만 보여서 썩 도움이 되지 않는다. 
- 같은 정수 열거 그룹에 속한 모든 상수를 한 바퀴 순회하는 방법도 마땅치 않다. 심지어 그 안에 상수가 몇 개인지도 알 수 없다. 

문자열 열거 패턴(string enum pattern)
- 열거 타입보다 더 나쁘다. 
- 상수의 의미를 출력할 수 있다는 점은 좋지만, 경험이 부족한 프로그래머가 문자열 상수의 이름 대신 문자열 값을 그대로 하드코딩하게 만들기 때문이다.
- 이렇게 하드코딩한 문자열에 오타가 있어도 컴파일러는 호가인할 길이 없으니 자연스럽게 런타임 버그가 생긴다. 문자열 비교에 따른 성능 저하 역시 당연한 결과다.
- 다행히 자바는 열거 패턴의 단점을 말끔히 씻어주는 동시에 여러 장점을 안겨주는 대안을 제시했다. 바로 열거 타입이다.(enum type)

열거 타입
public enum Apple { FUJI, PIPPIN, GRANY_SMITH}
public enum Orange { NAVEL, TEMPLE, BLOOD } 
- 겉보기에는 C, C++, C# 같은 다른 언어의 열거 타입과 비슷하지만, 보이는 것이 다가 아니다.
- 자바의 열거 타입은 완전한 형태의 클래스라서 (단순한 정수 값일 뿐인) 다른 언어의 열거 타입보다 훨씬 강력하다.
- 자바 열거 타입을 뒷받침하는 아이디어는 단순하다. 열거 타입 자체는 클래스이며, 상수 하나당 자신의 인스턴스를 하나씩 만들어 public static final 필드로 공개한다.
- 열거 타입은 밖에서접근할 수 있는 생성자를 제공하지 않으므로 사실상 final이다. 
- 열거 타입에 새로운 상수를 추가하거나 순서를 바꿔도 다시 컴파일하지 않아도 된다. 
- 열거 타입의 toString 메서드는 출력하기에 적합한 문자열을 내어준다. 

public enum Planet {
  MERCURY(3.302e+23, 2.439e6).
  VENUS(4.869e+24, 6.052e6);

  private final double mass;
  private final double radius;
  private final double surfaceGravity;

  private static final double G = 6.67300E-11;

  Planet(double mass, double radius) {
    this.mass = mass;
    this.radius = radius;
    surfaceGravity = G * mass / (radius * radius);
  }

  public double mass() {
    return mass;
  }
  public double radius() {
    return radius;
  }
  public double surfacdGravity() {
    return surfaceGravity;
  }

  public double surfaceWeight(double mass) {
    return mass * surfaceGravity;
  }
}
-보다시피 거대한 열거 타입을 만드는 일도 그리 어렵지 않다.
열거 타입 상수 각각을 특정 데이터와 연결지으려면 생성자에게 데이터를 받아 인스턴스 필드에 저장하면 된다. 
- 열거 타입은 근본적으로 불변이라 모든 필드는 final이어야 한다.
- 필드를 public으로 선언해도 되지만, private으로 두고 별도의 public 접근자 메서들르 두는 게 낫다. 
- 열거 타입은 자신 안에 정의된 상수들의 값을 배열에 담아 반환하는 정적 메서드인 values를 제공한다. 값들은 선언된 순서로 저장된다. 
- 각 열거 타입 값의 toString 메서드는 상수 이름을 문자열로 반환하므로 println과 printf로 출력하기에 안성맞춤이다. 
