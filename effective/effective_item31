item31. 한정적 와일드카드를 사용해 API 유연성을 높이라.
서로 다른 타입 Type1과 Type2가 있을 떄 List<Type1>은 List<Type2>의 하위 타입도 상위 타입도 아니다.
직관적이지 않겠지만 List<String>은 List<Object>의 하위 타입이 아니라는 뜻인데, 곰곰이 따져보면 사실 이쪽이 말이 된다. 

매개변수화 타입 T가 생산자라면 <? extends T>를 사용하고, 
소비자라면 <? super T>를 사용하라.

자바 7까지는 명시적 타입 인수를 사용해야 한다.
Set<Number> numbers = Union.<Number>union(integers, doubles);

public static <E> set<E> union(Set <? extends E> s1, Set<? extends E> s2) 
수정한 선언을 사용하면 다음 코드도 말끔히 컴파일된다.
Set<Integer> integers = Set.of(1 , 3, 5);
Set<Double> doubles = Set.of(2.0, 4.0, 6.0);
Set<Number> numbers = union(integers, doubles);

[핵심 정리]
조금 복잡하더라도 와일드카드 타입을 적용하면 API가 훨씬 유연해진다. 그러니 널리 쓰일 라이브러리를 작성한다면 반드시 와일드카드 타입을 적절히 사용해줘야 한다.
PECS 공식을 기억하자. 즉, 생산자(producer)는 extends를 소비자(consumer)는 super를 사용한다.
Comparable과 Comparator는 모두 소비자라는 사실도 잊지 말자. 
