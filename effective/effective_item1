아이템1. 생성자 대신 정적 팩터리 메서드를 고려하라.

정적 팩터리 메서드가 생성자보다 좋은 장점 다섯 가지를 알아보자.
첫 번째, 이름을 가질 수 있다.
두 번째, 호출될 때마다 인스턴스를 새로 생성하지는 않아도 된다.
세 번째, 반환 타입의 하위 타입 객체를 반환할 수 있는 능력이 있다. 
  이 능력은 반환할 객체의 클래스를 자유롭게 선택할 수 있게 하는 '엄청난 유연성'을 선물한다.
네 번째, 입력 매개변수에 따라 매번 다른 클래스의 객체를 반환할 수 있다.
다섯 번째, 정적 팩터리 메서드를 작성하는 시점에는 반환할 객체의 클래스가 존재하지 않아도 된다.

from: 매개변수를 하나 받아서 해당 타입의 인스턴스를 반환하는 형변환 메서드
Ex) Date d = Date.from(instant);

of: 여러 매개변수를 받아 적합한 타입의 인스턴스를 반환하는 집계 메서드
Ex) Set<Rank> faceCards = EnumSet.of(JACK, QUEEN, KING);

valueOf: from과 of의 더 자세한 버전
Ex) BigInteger prime = BigInteger.valueOf(Integer.MAX_VALUE);

instance 혹은 getInstance: (매개변수를 받는다면) 매개변수로 명시한 인스턴스를 반환하지만, 같은 인스턴스임을 보장하지는 않는다.
Ex) StackWalker luke = StackWalker.getInstance(options);

create 혹은 newInstance: instance 혹은 getInstance와 같지만, 매번 새로운 인스턴스를 생성해 반환함을 보장한다.
Ex) Object newArray = Array.newInstance(classObject, arrayLen);

getType: getInstance와 같으나, 생성할 클래스가 아닌 다른 클래스에 팩터리 메서드를 정의할 때 쓴다. "Type"은 팩터리 메서드가 반환할 객체의 타입이다.
Ex) FileStore fs = Files.getFileStore(path);

newType: newInstance와 같으나, 생성할 클래스가 아닌 다른 클래스에 팩터리 메서들르 정의할 때 쓴다. "Type"은 팩터리 메서드가 반환할 객체의 타입이다.
Ex) BufferedReader br = Files.newBufferedReader(path);

type: getType과 newType의 간결한 버전
Ex) List<Complaint> litany = Collections.list(legecyLitany);

[핵심정리]
정적 팩터리 메서드와 public 생성자는 각자의 쓰임새가 있으니 상대적인 장단점을 이해하고 사용하는 것이 좋다.
그렇다고 하더라도 정적 팩터리를 사용하는 게 유리한 경우가 더 많으므로 무작정 public 생성자를 제공하던 습관이 있다면 고치자.

