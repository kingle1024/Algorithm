item29. 이왕이면 제네릭 타입으로 만들라.

JDK가 제공하는 제네릭 타입과 메서드를 사용하는 일은 일반적으로 쉬운 편이지만, 제네릭 타입을 새로 만드는 일은 조금 더 어렵다.
item28에서 설명한 것처럼, E와 같은 실체화 불가 타입으로는 배열을 만들 수 없다.
배열을 사용하는 코드를 제네릭으로 만들려 할 때는 이 문제가 항상 발목을 잡을 것이다. 

첫번쨰 방법(반환 시 형변환)
elements = (E[]) new Object[DEFAULT_INITIAL_CAPACITY]

두번쨰 방법(사용하는 곳에서 형변환)
E result = (E) elements[--size];

현업에서는 첫번째 방식을 더 선호하며 자주 사용한다.
하지만 배열의 런타임 타입이 컴파일타임 타입과 달라 힙 오염을 일으킨다.
힙 오염이 맘에 걸리는 프로그래머는 두 번째 방식을 고수하기도 한다.

HashMap 같은 제네릭 타입은 성능을 높일 목적으로 배열을 사용하기도 한다.
제네릭에서 기본 타입은 사용할 수 없다.
Ex) Stack<int>나 Stack<double>을 만들려고 하면 컴파일 오류가 난다. 

[핵심 정리]
클라이언트에서 직접 형변환해야 하는 타입보다 제네릭 타입이 더 안전하고 쓰기 편하다.
그러니 새로운 타입을 설계할 때는 형변환 없이도 사용할 수 있도록 하라.
그렇게 하려면 제네릭 타입으로 만들어야 할 경우가 많다. 기존 타입 중 제네릭이었어야 하는 게 있다면 제네릭 타입으로 변경하자.
기존 클라이언트에는 아무 영향을 주지 않으면서, 새로운 사용자를 훨씬 편하게 해주는 길이다.
