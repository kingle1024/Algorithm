item42. 익명 클래스보다는 람다를 사용하라. 
JDK 1.1이 등장하면서 함수 객체를 만드는 주요 수단은 익명 클래스가 되었다.
다음 코드를 예로 살펴보자. 문자열을 길이순으로 정렬하는데, 정렬을 위한 비교 함수로 익명 클래스를 사용한다.

Collections.sort(words, new Comparator<String>() {
  public int compare(String s1, String s2) {
      return Integer.compare(s1.length(), s2.length());
  }
});

전략 패턴 처럼, 함수 객체를 사용하는 과거 객체 지향 디자인 패턴에는 익명 클래스면 충분했다.
하지만 익명 클래스 방식은 코드가 너무 길기 때문에 자바는 함수형 프로그래밍에 적합하지 않았다.
자바 8에 와서 추상 메서드 하나짜리 인터페이스는 특별한 의미를 인정받아 특별한 대우를 받게 되었다.
지금은 함수형 인터페이스라 부르는 이 인터페이스들의 인스턴스를 람다식을 사용해 만들 수 있게 된 것이다.
람다는 함수나 익명 클래스와 개념은 비슷하지만 코드는 훨씬 간결하다.

Collections.sort(words,
  (s1, s2) -> Integer.compare(s1.length(), s2.length()));
여기서 람다, 매개변수(s1, s2), 반환값읱 ㅏ입은 각각 (Comparator<String>), String, int지만 코드에서는 언급이 없다.
우리 대신 컴파일러가 문맥을 살펴 타입을 추론해준 것이다. 
타입을 명시해야 코드가 더 명확할 때만 제외하고는, 람다의 모든 매개변수 타입은 생략하자.
