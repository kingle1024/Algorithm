item39. 명명 패턴보다 애너테이션을 사용하라.

전통적으로 도구나 프레임워크가 특별히 다뤄야 할 프로그램 요소에는 딱 구분되는 명명 패턴을 적용해왔다.
예컨대 테스트 프레임워크인 JUnit은 버전 3까지 테스트 메서드 이름을 test로 시작하게끔 했다.
효과적인 방법이지만 단점도 크다. 

-첫번째, 오타가 나면 안 된다. 실수로 이름을 tsetSafetyOverride로 지으면 JUnit3은 이 메서드를 무시하고 지나치기 때문에
개발자는 이 테스트가 실패하지 않았으니 토오가했다고 오해할 수 있다.
-두번째는, 올바른 프로그램 요소에만 사용되리라 보증할 방법이 없다는 것이다.
예컨대 메서드가 아닌 클래스 이름을 TestSafetyMechanisms로 지어 JUnit에 던져줬다고 해보자.
개발자는 이 클래스에 정의된 테스트 메서드들을 수행해주길 기대하겠지만 JUnit은 클래스 이름에는 관심이 없다.
이번에도 JUnit은 경고 메시지조차 출력하지 않지만 개발자가 의도한 테스트는 전혀 수행되지 않는다.
-세번째는, 프로그램 요소를 매개변수로 전달할 마땅한 방법이 없다는 것이다.
특정 예외를 던져야만 성공하는 테스트가 있다고 해보자. 기대하는 예외 타입을 테스트에 매개변수로 전달해야 하는 상황이다.
예외의 이름을 테스트 메서드 이름에 덧붙이는 방법도 있지만, 보기도 나쁘고 깨지기도 쉽다.
컴파일러는 메서드 이름에 덧붙인 문자열이 예외를 가리키는지 알 도리가 없다.
테스트를 실행하기 전에는 그런 이름의 클래스가 존재하는지 혹은 예외가 맞는지조차 알 수 없다.

애너테이션은 이 모든 문제를 해결해주는 멋진 개념으로, JUnit도 버전 4부터 전면 도입하였다.
@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.METHOD)
public @interface Test {}
@Retention  메타애너테이션은 @Test가 런타임에도 유지되어야 한다는 표시다.
