### RISC 명령어 방식 (Reduced Instruction Set Computer, RISC)
- CPU 명령어의 개수를 줄여 명령어 해석시간을 줄임으로써 개별 명령어의 실행속도를 빠르게 한 컴퓨터다.
- RISC의 중요한 목표는 명령어 파이프라인을 통해 개별 명령어의 실행속도를 높여 복잡 명령어 집합 컴퓨터*CISC)에 비해 더 많은 명령어를 처리해야 하는 단점을 상쇄하는 것이다.

- 고정된 길이의 명령어 사용 (vs 가변 길이 명령어 사용) 
- 처리속도를 위해 사용되는 몇 가지 명령어 위주로 단순화한 명령축소형 프로세서 (vs 복합 명령어 프로세서)
- Hardwired 제어 방식 사용(vs 마이크로 프로그래밍 방식) 
- 데이터 캐시와 명령 캐시의 분리 (vs 단일 캐시 공유)
- 하바드 아키텍처 (vs 폰 노이만 아키텍처)
- 슈퍼 파이프라인, 슈퍼 스칼라 기법 사용 (vs 파이프라인 사용이 어려움)
- 주로 모바일, 임베디드 계열(ARM) 

### CISC 명령어 방식(Complex Instruction Set Computer)
- 명령어 하나를 처리하는 구조가 복잡
- 연산 처리시 복잡한 여러 개의 명령어들을 가지고 있는 복합 명령어 프로세서 
- 마이크로 프로그램 제어방식을 채택
- 가변 길이 명령어 사용
- 주로 Intel 계열 CPU 구조
- 폰 노이만 아키텍처
- 파이프라인 사용이 어려움
- 단일캐시 공유 

### RPO (Recovery Point Objectives) : 복구 목표 지점
- 정보 시스템 장애 시, 비즈니스 연속을 위해 어느 시점으로 정보시스템을 되돌릴지를 결정하는 지표
- 재해 발생 이전의 알려진 상태로의 "롤백" 또는 동기화하는 목표 상태를 의미 
- 감내 가능한 데이터 유실량(금융권 RPO 목표는 0)

### RTO (Recovery Time Objectives) : 복구 목표 시간
- 정보시스템 장애 시 시스템을 원상태로 복원하는데 소요되는 시간을 의미
- 정보시스템의 최대 허용 다운타임과 연관됨

### 서버소켓
1) 소켓(Socket)을 생성(create)
2) 생성한 소켓에서 사용할 IP 주소와 포트 번호를 결합(bind)
3) 그후 클라이언트로부터 연결 요청이 수신되는지 주시(listen) --> wait가 아니라 listen이다.
4) 요청이 수신되면 요청을 받아들여(accept) 데이터 통신을 위한 소켓을 연결
5) 새로운 소켓을 통해 연결이 수립(established)되면 송수신(send/recv)할 수 있음.
6) 데이터 송수신이 완료되면, 소켓(socket)을 닫습니다.(close)

### 클라이언트소켓
1) 소켓(socket)을 생성(create)
2) 서버 측에 연결(connect)을 요청
3) 서버 소켓에서 연결이 받아들여지면 데이터를 송수신(send/recv)
4) 모든 처리가 완료되면 소켓(socket)을 닫습니다(close)

### OpenMP 병렬 프로그램 코드 
- omp_set_threads(4)
- #pragma omp parallel num_thread(2)가 쓰레드 개수 조절

### 
- 프로세서의 명칭 : SIMD
  - 배열 프로세서(Array Processor)
- 제어장치 역할 : 
  - 제어장치는 기억장치에서 명령을 읽어 해독
  - 다음에 실행될 명령어 주소를 계산
  - 연산의 수행 순서를 결정
  - 명령어 실행에 필요한 제어 신호를 발생
  - (정답 키워드 : 해독, 순서결정, 제어신호, 명령주소 계산)


단일 명령어 스트림 - 단일 데이터 스트림(SISD, Single Instruction Stream - Single Data Stream)
- SISD의 병렬처리 구현의 예 : 파이프라이닝 구조

단일 명령어 스트림 - 복수 데이터 스트림(SIMD, Single Instruction Stream, Multiple Data Stream)
- n개의 프로세싱 유닛으로 구성되나, 동작은 하나의 제어 장치(CU)에 의해 통제됨
- 모든 처리장치들은 다 동일 연산을 수행하지만, 각각 서로 다른 데이터들을 처리하는, 데이터 관점의 병렬성(data-level parallelism) 구현
    명령어 흐름 데이터 흐름    사례
SISD  1             1         팬티엄, 폰노이만구조
SIMD  1             다중      Array, 슈퍼컴퓨터
MISD  다중          1         적용어려움
MIMD  다중          다중      SMP, MPP, NUMA
