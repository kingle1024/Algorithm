소프트웨어 공학의 4가지 중요요소
- 방법
- 도구
- 절차
- 사람

소프트웨어 생명주기 모델 종류
- V모델
- VP모델
- 점증적 모델(Incremental Model)
- 진화 모델(Evolutionary Model)

소프트웨어 개발단계
1) 요구사항 분석
2) 설계
3) 구현
4) 테스팅 

XP
- 중소규모 개발조직에 적합
- TDD, Daily Build, Continue Integration이 자주 이루어짐

소프트웨어의 재사용(reuse)
- 범용성, 모듈성, 하드웨어 독립성, 소프트웨어 독립성, 자기문서화, 일반성, 신뢰성

역공학
- 이미 만들어져 있는 시스템을 역으로 추적하여 처음의 문서나 설계기법등의 자료를 얻어냄

자료구조
- 선형구조 
  - 원시코드로부터 정보를 추출하여 물리적 설계 정보 저장소에 저장
  - 물리적 설계 자료들이 직선 형태로 나열되어 자료들 간의 순서를 고려한 구조로 전후/인접/선후 자료들 간의 1:1 관계로 나열됨
  - 배열, 선형리스트, 연결리스트, 스택, 큐 등이 있음
- 비선형구조
  - 한 자료 뒤에 여러 개의 자료들이 존재하는 구조로 인접/전후 자료들 간의 1:다 또는 다:다 관계로 배치됨
  - 트리, 그래프 등이 있음

스택
- pop()
- push()
- isempty()
  - 비어있으면 true, 차있으면 false
- isfull()
  - 비어있으면 false, 차있으면 true

트리
- 간선(edge) : 노드를 연결하는 선
- 루트노드(root node) : 트리의 시작노드
- 형제노드(sibling node) : 같은 부모 노드를 가진 자식 노드
- 서브트리(subtree) : 부모노드와 연결된 간선을 끊었을 때 생성되는 트리

자료구조의 선택 기준
- 자료의 처리시간
- 자료의 크기

알고리즘
- 시간복잡도 : 프로그램을 실행하여 완료하는데 걸리는 시간
- 공간복잡도 : 실행하여 완료하기까지 필요한 총 저장공간 
- 비교 시에는 주로 실행 시간을 사용하며 시간복잡도로 나타낸 빅오 표기법을 사용하여 표기한다. 

SOLID
S(Single Responsibility Principle) - 단일책임의원칙 : 하나의 클래스는 하나의 method만을 갖게 됨에 따라 수정에 대한 이유는 한가지가 되어야 한다.
O(Open/Close Principle) - 개방폐쇄원칙 : 하나의 클래스는 수정에는 폐쇄되어 있고, 확장에는 개방되어 있어야 한다.
L(Liskov Subsitution Principle) - 리드코프치환원칙 : 하위클래스는 언제나 상위클래스로 참조가 가능한 상속과 관련된 원칙이다.
I(Interface Segregation Principle) - 인터페이스 분리의 원칙 : 노출 방법에 대한 원칙으로 사용자 별로 다른 방식의 인터페이스를 제공토록 설계해야 한다.
D(Dependency Inversion Principle) - 의존성 역전의 원칙 : 변경 가능성을 최소화하기 위하여 인터페이스를 통한 추상화를 통해 최대한 스는하게 설계하자. 

public abstract class Animal {
  String name;
  String age;
  public void walk() { sout("walk"); }
  public void eat() { sout("eat"); }
  public abstract void bark();
}
