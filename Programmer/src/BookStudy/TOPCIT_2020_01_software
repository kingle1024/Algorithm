### 이진 탐색 트리의 조건
1) 모든 노드의 키는 유일하다.
2) 왼쪽 서브 트리의 키들은 루트의 키보다 작다.
3) 오른쪽 서브 트리의 키들은 루트의 키보다 크다.
4) 왼쪽과 오른쪽 서브 트리도 이진 탐색 트리이다. 

### setTitle 메소드의 "+" 표시는 public 접근제한 속성으로 어떤 클래스의 객체에서든 접근 가능하다.

### UML표기법의 접근제한자
- public | + | 어떤 클래스에서도 접근 가능
- private | - | 해당 클래스에서 생성된 객체들만 접근 가능 
- protected | # | 해당 클래스와 동일 패키지에 있거나 상속관계에 있는 하위 클래스의 객체들만 접근 가능
- {abstract} 프로퍼티가 있으므로 메소드에도 abstract 키워드를 사용하여야 한다. 

### 추상 클래스
abstract class People { 
  abstract void walk();
}

### 다이어그램
- DFD(Data Flow Diagram)
  - 구성요소
    - Process(원형), Data Flow(화살표), Data Store(데이터 저장소), External Entity(DFD 외부범위) 
- 액티비티 다이어그램
  - UML 표기
    - 시작점 : 활동의 시작을 의미(검은색 동그라미)
    - 활동상태 : 처리와 실행을 의미(둥근 사각형)
    - 종료점 : 처리의 종료(이중 동그라미)
    - 분기 : 마름모를 사용하여 활동 전이표현(마름모) 
    - 동기화 막대 : 한가지 이상의 활동이 병행 수행
- 클래스 다이어그램(Class Diagram)
  - 클래스 명칭들이 존재 
- 시퀀스 다이어그램(Sequence Diagram)
  - 막대기 
- 유스케이스 다이어그램(Usecase Diagram)
  - 졸라맨
- 상태 다이어그램(Statechart Diagram)


### 결합도
- 각 모듈 간에 변경 발생시 영향을 미치는 정도로 낮을 수록 좋다.
- 자료결합도 -> 스템프 -> 제어 -> 외부 -> 공통 -> 내용결합도 순으로, 자료결합도가 가장 결합도가 낮다. 
### 응집도
- 각 모듈이 하나의 기능을 중심으로 잘 뭉쳐져 있는지를 판단하는 것으로 높을수록 좋다.
- 기능 > 순차 > 통신 > 절차 > 일시 > 논리 > 우연 순으로, 기능이 응집도가 가장 높다.

### 파이썬 
- 파이썬에서는 recursion 횟수를 1000번으로 제한하고 있다.
  - RecursionError: maximum recursion depth exceeded in comparison 에러가 발생한다. 
  - 파이썬에서는 기본 설정값을 변경하지 않으면 

### 구문 커버리지(Statement Coverage)
- 시험 대상의 전체 구문 중에 테스트에 의해 실행된 구문을 측정한 것
- 말 그대로 구문이 n개인데 그 중에 몇개가 실행되었는지를 측정한다.
- 구문 커버리지(%) = (수행된 구문의 수 / 전체 구문의 수) x 100 

### 결정 커버리지(Decision Coverage)
- 시험 대상의 전체 분기 중 테스트에 의해 실행된 것을 측정한 값이며, 분기 커버리지(Branch Coverage)라고도 함
- 예를 들어 하나의 if문이 있을 경우, 결정 커버리지 100%를 달성하려면 true를 실행하는 테스트 데이터와 false를 실행하는 테스트 데이터가 모두 필요.
- 결정 커버리지(%) = (수행된 분기 수 / 전체 분기 수)  x 100
- 단점 : 개별 조건식에 오류가 있는 경우 찾지 못할 수 있음 
- false, x / true, false / true, true => 3가지 경우 체크 

### 조건 커버리지(Condition Coverage)
- 조건 커버리지는 모든 조건식의 true, false 중 테스트에 의해 실행된 것을 측정한 것
- false, false / false, true / true, false / true, true => 4가지 경우 체크

### 조건/결정 커버리지(Condition / Decision Coverage)
- 조건/결정 커버리지는 분기는 고려하지 않는 조건 커버리지를 개선한 것으로 실행된 개별 조건식의 true, false와 분기 모두를 측정한 값입니다.
- 조건/결정 커버리지(%) = [(수행된 분기 + 조건의 수) / (전체 분기 + 조건의 수)] x 100
- true, true / false, false => 2가지 경우 체크 
- 전체 조건식 T/F, 개별조건식 T/F를 모두 나오게 만들면 됨

### 변형 조건/결정 커버리지(Modified Condition/Decision Coverage)
- MC/DC는 다른 조건식과 무관하게 분기를 결정하는 개별 조건식의 true, false 중 테스트에 의해 실행된 것을 측정한 값입니다.
- MC/DC 커버리지 100%를 달성하기 위해서는 일반적으로 개별 조건식의 수 +1 개의 테스트 케이스가 필요합니다.
- 모든 결정 포인트 내의 전체 조건식은 적어도 한번 T,F를 가져야 함. 
- 결정 포인트 내의 개별 조건식은 적어도 한번 T,F를 가져야 함 
- 각 개별 조건식이 다른 개별 조건식에 영향을 받지 않고 전체 조건식의 결과에 독립적으로 영향을 주저야 함
- 이론적으로 가장 안전한 조합이며 케이스도 줄일 수 있으나 수동으로 적용하기엔 리소스 많이 소모됨. 수동으로 하면 실수 가능성 많음 

### 다중 조건 커버리지(Multiple Condition Coverage)
- 다중 조건 커버리지는 모든 개별 조건식의 true, false 조합 중 테스트에 의해 실행된 조합을 측정한 것입니다.
- 100%를 달성하기 위해서는 모든 개별 조건식 조합을 실행해야 하기 때문에 다른 커버리지에 비해 상대적으로 많은 테스트 케이스가 필요합니다.
- 다중 조건 커버리지(%) = (수행된 조건식 조합의 수 / 전체 조건식 조합의 수) % 100 
- 모든 개별 조건식의 논리적 조합을 고려하면 됨. 

### Application Shell(App Shell)
- Progressive Web App을 빌드하는 방법 중 하나
- 사용자 인터페이스를 구동하는데 필요한 HTML, CSS 및 Javascript
- 서비스 워커를 통한 오프라인 캐시 및 필요한 콘텐츠만 네트워크에서 로드 

### Service Worker
- 브라우저와 네트워크 사이의 가상 프록시
- App Shell 및 App Data를 캐싱, 오프라인 상태에서도 사용 가능
- 푸시 알림 기능, 독립 쓰레드를 이용한 복잡한 계산 등 
- 안전한 컨텍스트(HTTPS) 환경에서만 실행 

### 프록시
- 대리 역할을 함.
- 클라이언트와 서버 사이에 존재 
- 포워드 프록시(Forward Proxy)
  - 보통 말하는 프록시가 바로 이 포워드 프록시를 말한다.
  - Client와 Server 사이에 위치하여 요청을 중계하며, 요청과 응답은 Proxy Server를 거친다.
  - 클라이언트를 감추는 효과가 있다. 
- 리버스 프록시(Reverse Proxy)
  - 포워드 프록시와 다르게 Server들이 주로 내부망으로 구성되며 프록시에게만 연결을 허용한다. 
  - 즉, 서비스를 위한 보안 채널을 구축한다. 
  - 이런 경우 Client가 Server에 직접 접근이 불가능하므로, Reverse Proxy에서 요청을 적극적으로 중계하는 Load Balancing의 역할을 수행하기 도한다.
  - 서버를 감추는 효과가 있다. 
- 사용하는 이유
  - 개인정보를 보호할 수 있다.
    - 프록시 서버 없이 클라이언트가 서버에 요청 시 본인의 IP 주소가 노출되는데, 프록시 서버를 사용 시 서버측에서 나의 IP가 아닌 프록시 서버의 IP를 보게 된다.
    - 즉, IP를 숨길 수 있다.
  - 캐시를 사용해서 속도가 향상된다.
    - 프록시 서버는 웹페이지를 가져올 때 자신의 DB에 최근 데이터를 저장하는데, 이것을 Cache라 한다.
    - 이렇게 될 시, 같은 요청이 들어오면 Cache 자원을 반환하여 서비스의 속도를 높이고 대역폭도 줄일 수 있다.
  - 로그를 기록, 관리할 수 있다.
    - 서버 측에선 클라이언트의 기록대신 프록시 서버의 기록이 있지만, 프록시 서버에겐 클라이언트의 기록이 남아있다.
    - 이 기록들을 보면 어떤 IP에서 어떤 IP로 얼마나 접속해 있는지 확인할 수 있고, 특정 IP가 방문할 수 있는 웹사이트도 제한할 수 있어서 회사에서 많이 사용한다.
  - 접속을 우회할 수 있다.
    - 특정 사이트에서 IP를 검사해 한국에서의 접속을 차단하는 경우가 있는데, 이런 경우 프록시 서버를 사용해 접속 시 다른나라에서 접속한 것처럼 우회할 수 있다.
